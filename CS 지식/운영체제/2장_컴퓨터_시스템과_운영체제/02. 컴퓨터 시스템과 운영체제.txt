
프로세서(처리기, CPU) != 프로세스

1. 컴퓨터 시스템과 하드웨어

컴퓨터 시스템 계층
컴퓨터 시스템 계층 구조 -> 반드시 운영체제 통해서만 접근 가능

01. 컴퓨터 하드웨어

CPU : 사용자모드 커널모드 한가지만 작동
메모리
캐시 메모리
장치
버스(주소, 데이터, 제어)
 - 시스템 버스
 - 입출력 버스

02. CPU와 메모리 관계(중요)

32비트 컴퓨터 
32비트 CPU
 i) 한번에 32비트를 처리할 수 있는 내부구조(레지스터, ALU)등을 갖는 CPU
 i) 32개의 주소선
  ii) 최대 액세스할 수 있는 메모리 크기 : 0번 ~ 2^32-1번지 = 4GB 
 i) 32개의 데이터선

2KB(키로바이트) -> 2^10

03. CPU의 일생 - 명령 처리 과정

CU(컨트롤 유닛) / 레지스터 / ALU

CPU 레지스터들(4가지 중요)
 - PC
 - IR
 - SP				: 스택구조 - 스택포인터(push, pop)
 - 상태 레지스터
 - 데이터 레지스터들
 - 기타 특수용도 레지스터들

CPU 명령 사이클
 - 인출, 실행, 인터럽트 단계

명령어 사례
mov, eax, [300] ; 메모리 300 번지의 값을 읽어 eax 레지스터에 저장
 i) PC는 주소(100)을 주소 버스에 실음
 i) (mov, eax, [300]) 데이터를 메모리 100번지에 넣는다
 i) 데이터 버스에 담긴 값을 IR 레지스터에 저장하고 PC를 다음 번지로 수정
 i) 데이터의 주소(300)을 주소 버스에 실음
 i) 메모리 300번지에 담긴 50을 데이터 버스에 실음

04. 스택과 컨텍스트

스택(Stack)은 어디에 있는가?
 i) 코드(code) 공간
 i) 데이터(data) 공간
 i) 힙(heap) 공간
 i) 스택(stack) 공간

스택(Stack)이란?
 - 특정 주소를 기억하지 않고 push, pop 명령어를 통해 주소를 지정할 수 있는 방법
 - 메모리의 일부를 스택으로 사용하도록 할당된 공간
 - 운영체제는 스택 공간을 할당 

프로그램 - 보조기억장치, 보조 프로그램
프로세스 - 주기억장치에 올라와서 바로 실행될 수 있는 것

컨텍스트(Context, 문맥)(중요)
 - 프로세스의 일체의 상황 혹은 상황 정보
 - 프로세스 상태, CPU 상태를 기억하는 레지스터 값(정보), 하나의 프로세스가 실행되는 모든 정보.
 - 축소 정의된 컨텍스트의 정의(CPU 레지스터 값만으로 정의)

컨텍스트 스위칭(문맥교환) 
 - 프로그램 A에서 프로그램 B로 컨텍스 스위칭
 - 메모리, 프로세스의 상황들, CPU 상황 스위칭
 - OS에서 메모리를 나두고 CPU의 상황만 전달, 프로세스와 프로세스간

05. 컴퓨터 시스템 계층 구조

운영체제 커널 코드
디바이스 드라이버 -> 하드웨어 디바이스 장치의 정보를 알려주기 위한 OS 기능 

컴퓨터 시스템이 계층 구조로 설계된 이유
 사용자 모드, 커널모드

시스템 호출

커널, 도구 소프트웨어와 GUI, 디바이스 드라이버
인터럽트

사용자 공간, 커널 공간

논리공간
 - 항상 물리 주소 0번지 부터 시작, CPU 전체 주소(물리 주소 공간)를 사용할 수있다고 착각
 - 논리공간을 쓰는 것이지 물리 공간을 쓰는것이 아님

사용자 공간의 충돌 해결
가상 주소 공간의 물리 메모리 매핑
